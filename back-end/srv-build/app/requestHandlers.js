// Generated by CoffeeScript 1.10.0
var Reqs, linode, serv, tools;

tools = require('../tools');

linode = require('../app/linode.js');

Reqs = require('../lib/reqs.js');

serv = Reqs["new"]({
  'send': function(data) {
    if (this.readyState === 1) {
      return this.sendText(data);
    }
  },
  API: {
    'ping': function(time, cb) {
      var res;
      time = time ? Date.now() - time : 0;
      res = {
        'time': Date.now(),
        'ping': time
      };
      if (tools.isFunction(cb)) {
        return cb(res, this);
      } else {
        return serv.CPI.pong.call(this, res);
      }
    },
    'pong': function(arg, cb) {
      return console.info('/ pong: to client, from client', arg.ping, Date.now() - arg.time);
    },
    'linodeListAll': function(arg, cb) {
      var conn;
      conn = this.conn;
      return linode.linodeListAll(arg, function(err, data) {
        return serv.CPI.linodeListAll.call(conn, err, data);
      });
    },
    'linodeListAll1': function(arg, cb) {
      var conn;
      conn = this.conn;
      return linode.linodeListAll1(arg, function(err, data) {
        return serv.CPI.linodeListAll1.call(conn, err, data);
      });
    },
    'linodeAll': function(arg, cb) {
      var conn;
      conn = this.conn;
      return linode.linodeAll(arg, function(err, data) {
        return serv.CPI.linodeAll.call(conn, err, data);
      });
    }
  }
});

exports.key = function(k) {
  return linode.key(k);
};

exports.url = function(u) {
  return linode.url(u);
};

exports.handle = {
  root: function(str) {
    var error, error1;
    try {
      return serv.parse(str, this);
    } catch (error1) {
      error = error1;
      return console.error('err', error);
    }
  }
};

//# sourceMappingURL=requestHandlers.js.map

// Generated by CoffeeScript 1.10.0
var ConvertLinode, Converter, _apiSpec, _api_action, _linodeConfigList, _linodeDiskList, _linodeID, _linodeIpList, _linodeJobList, _linodeList, api_key, errors, liError, linodeGet, linodePost, linodePostBatch, needle, needleOptions, srvUrl, tools;

tools = require('../tools');

needle = require('needle');

needleOptions = {
  open_timeout: 5000,
  json: false
};

Converter = require('./converter');

ConvertLinode = Converter.convert.linode;

errors = {
  0: "ok",
  1: "Bad request",
  2: "No action was requested",
  3: "The requested class does not exist",
  4: "Authentication failed",
  5: "Object not found",
  6: "A required property is missing for this action",
  7: "Property is invalid",
  8: "A data validation error has occurred",
  9: "Method Not Implemented",
  10: "Too many batched requests",
  11: "RequestArray isn't valid JSON or WDDX",
  12: "Batch approaching timeout. Stopping here.",
  13: "Permission denied",
  14: "API rate limit exceeded",
  30: "Charging the credit card failed",
  31: "Credit card is expired",
  40: "Limit of Linodes added per hour reached",
  41: "Linode must have no disks before delete"
};

srvUrl = 'https://api.linode.com/';

api_key = '';

_api_action = 'api_action';

_linodeList = 'linode.list';

_linodeConfigList = 'linode.config.list';

_linodeDiskList = 'linode.disk.list';

_linodeIpList = 'linode.ip.list';

_linodeJobList = 'linode.job.list';

_linodeID = 'LinodeID';

_apiSpec = 'api.spec';

liError = function(n) {
  return {
    'ERRORARRAY': [
      {
        'ERRORCODE': n,
        'ERRORMESSAGE': errors[n]
      }
    ]
  };
};

exports.key = function(k) {
  return api_key = k;
};

exports.url = function(u) {
  return srvUrl = u;
};

exports.req = linodePost = function(method, data, cb) {
  needle.post(srvUrl + '?api_key=' + api_key + '&' + _api_action + '=' + method, data, needleOptions, cb);
};

linodePostBatch = function(arr, cb) {
  needle.post(srvUrl, {
    'api_key': api_key,
    'api_action': 'batch',
    'api_requestArray': JSON.stringify(arr)
  }, needleOptions, function(err, resp) {
    return cb(err, resp.body.DATA);
  });
};

linodeGet = function(method, data, cb) {
  data['api_key'] = api_key;
  data[_api_action] = method;
  needle.request('get', srvUrl, data, cb);
};

exports.linodeList = function(data, cb) {
  if (tools.isNumber(data)) {
    data = {
      LinodeID: data
    };
  } else {
    data = {};
  }
  return linodeGet(_linodeList, data, cb);
};

exports.linodeListAll = function(data, cb) {
  return linodeGet(_linodeList, {}, function(err, resp) {
    var dataItem, error, j, len, req;
    if (err) {
      console.error('linodeListAll error', err);
      cb(err);
      return;
    }
    try {
      req = [];
      data = resp.body.DATA;
      if (tools.isArray(data)) {
        for (j = 0, len = data.length; j < len; j++) {
          dataItem = data[j];
          req.push({
            'api_action': _linodeConfigList,
            LinodeID: dataItem.LINODEID
          }, {
            'api_action': _linodeDiskList,
            LinodeID: dataItem.LINODEID
          }, {
            'api_action': _linodeIpList,
            LinodeID: dataItem.LINODEID
          }, {
            'api_action': _linodeJobList,
            LinodeID: dataItem.LINODEID
          });
        }
      } else {
        req = {
          'ERRORARRAY': [
            {
              'ERRORCODE': 101,
              'ERRORMESSAGE': 'Linode API answer is not array'
            }
          ],
          'DATA': {},
          'ACTION': _linodeList
        };
        cb(err, req);
        return;
      }
      return needle.post(srvUrl, {
        'api_key': api_key,
        'api_action': 'batch',
        'api_requestArray': JSON.stringify(req)
      }, needleOptions, function(err, resp) {
        var _config, _disk, _id, _ip, _job, _state, i, item, l, len1, respData, result;
        if (err) {
          cb(err);
          console.error('Linode API request error: ', err);
          return;
        }
        respData = resp.body;
        result = [];
        for (i = l = 0, len1 = data.length; l < len1; i = ++l) {
          item = data[i];
          _id = data[i].LINODEID;
          _state = ConvertLinode.state(data[i]);
          _config = ConvertLinode.config(respData[i * 4].DATA);
          _disk = ConvertLinode.disk(respData[i * 4 + 1].DATA);
          _ip = ConvertLinode.ip(respData[i * 4 + 2].DATA);
          _job = ConvertLinode.job(respData[i * 4 + 3].DATA);
          result.push({
            'id': _id,
            'state': _state,
            'config': _config,
            'disk': _disk,
            'ip': _ip,
            'job': _job,
            'scripts': [
              {
                label: {
                  value: 'script 1'
                }
              }, {
                label: {
                  value: 'script 2'
                }
              }
            ]
          });
        }
        return cb(err, result);
      });
    } catch (error) {
      err = error;
      cb(err);
      return console.error('Linode request error: ', err);
    }
  });
};

//# sourceMappingURL=linode.js.map
